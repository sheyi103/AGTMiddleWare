// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package db

import (
	"database/sql"
	"fmt"
)

type ServicesNetworkType string

const (
	ServicesNetworkTypeMTN     ServicesNetworkType = "MTN"
	ServicesNetworkTypeAIRTEL  ServicesNetworkType = "AIRTEL"
	ServicesNetworkTypeGLO     ServicesNetworkType = "GLO"
	ServicesNetworkType9MOBILE ServicesNetworkType = "9MOBILE"
)

func (e *ServicesNetworkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServicesNetworkType(s)
	case string:
		*e = ServicesNetworkType(s)
	default:
		return fmt.Errorf("unsupported scan type for ServicesNetworkType: %T", src)
	}
	return nil
}

type ServicesService string

const (
	ServicesServiceSMS          ServicesService = "SMS"
	ServicesServiceUSSD         ServicesService = "USSD"
	ServicesServiceVOICE        ServicesService = "VOICE"
	ServicesServiceSUBSCRIPTION ServicesService = "SUBSCRIPTION"
)

func (e *ServicesService) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServicesService(s)
	case string:
		*e = ServicesService(s)
	default:
		return fmt.Errorf("unsupported scan type for ServicesService: %T", src)
	}
	return nil
}

type ServicesServiceInterface string

const (
	ServicesServiceInterfaceSOAP ServicesServiceInterface = "SOAP"
	ServicesServiceInterfaceHTTP ServicesServiceInterface = "HTTP"
	ServicesServiceInterfaceSMPP ServicesServiceInterface = "SMPP"
)

func (e *ServicesServiceInterface) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServicesServiceInterface(s)
	case string:
		*e = ServicesServiceInterface(s)
	default:
		return fmt.Errorf("unsupported scan type for ServicesServiceInterface: %T", src)
	}
	return nil
}

type ServicesServiceType string

const (
	ServicesServiceTypeDAILY    ServicesServiceType = "DAILY"
	ServicesServiceTypeWEEKLY   ServicesServiceType = "WEEKLY"
	ServicesServiceTypeMONTHLY  ServicesServiceType = "MONTHLY"
	ServicesServiceTypeONDEMAND ServicesServiceType = "ON-DEMAND"
)

func (e *ServicesServiceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServicesServiceType(s)
	case string:
		*e = ServicesServiceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ServicesServiceType: %T", src)
	}
	return nil
}

type Role struct {
	ID        int32        `json:"id"`
	Name      string       `json:"name"`
	CreatedAt sql.NullTime `json:"created_at"`
}

type Service struct {
	ID                      int32                    `json:"id"`
	ClientID                string                   `json:"client_id"`
	ClientSecret            string                   `json:"client_secret"`
	ShortcodeID             int32                    `json:"shortcode_id"`
	UserID                  int32                    `json:"user_id"`
	RoleID                  int32                    `json:"role_id"`
	ServiceName             sql.NullString           `json:"service_name"`
	ServiceID               sql.NullString           `json:"service_id"`
	ServiceInterface        ServicesServiceInterface `json:"service_interface"`
	Service                 ServicesService          `json:"service"`
	ServiceType             ServicesServiceType      `json:"service_type"`
	ProductID               sql.NullString           `json:"product_id"`
	NodeID                  sql.NullString           `json:"node_id"`
	SubscriptionID          sql.NullString           `json:"subscription_id"`
	SubscriptionDescription sql.NullString           `json:"subscription_description"`
	BaseUrl                 sql.NullString           `json:"base_url"`
	DatasyncEndpoint        sql.NullString           `json:"datasync_endpoint"`
	NotificationEndpoint    sql.NullString           `json:"notification_endpoint"`
	NetworkType             ServicesNetworkType      `json:"network_type"`
	CreatedAt               sql.NullTime             `json:"created_at"`
	UpdatedAt               sql.NullTime             `json:"updated_at"`
}

type ShortCode struct {
	ID        int32        `json:"id"`
	ShortCode string       `json:"short_code"`
	CreatedAt sql.NullTime `json:"created_at"`
}

type User struct {
	ID            int32        `json:"id"`
	Name          string       `json:"name"`
	Password      string       `json:"password"`
	Email         string       `json:"email"`
	PhoneNumber   string       `json:"phone_number"`
	ContactPerson string       `json:"contact_person"`
	RoleID        int32        `json:"role_id"`
	CreatedAt     sql.NullTime `json:"created_at"`
	UpdatedAt     sql.NullTime `json:"updated_at"`
}
