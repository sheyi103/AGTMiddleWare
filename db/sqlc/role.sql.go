// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: role.sql

package db

import (
	"context"
	"database/sql"
)

const createRole = `-- name: CreateRole :execresult
INSERT INTO roles (
  name
) VALUES (
  ?
)
`

func (q *Queries) CreateRole(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRole, name)
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, name, created_at FROM roles
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, created_at FROM roles
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoleNames = `-- name: UpdateRoleNames :execresult
UPDATE roles SET name = ?
WHERE id = ?
`

type UpdateRoleNamesParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateRoleNames(ctx context.Context, arg UpdateRoleNamesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateRoleNames, arg.Name, arg.ID)
}
