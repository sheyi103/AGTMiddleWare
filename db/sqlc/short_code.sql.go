// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: short_code.sql

package db

import (
	"context"
	"database/sql"
)

const createShortCode = `-- name: CreateShortCode :execresult
INSERT INTO short_codes (
  short_code
) VALUES (
  ?
)
`

func (q *Queries) CreateShortCode(ctx context.Context, shortCode string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createShortCode, shortCode)
}

const deleteShortCode = `-- name: DeleteShortCode :exec
DELETE FROM short_codes
WHERE id = ?
`

func (q *Queries) DeleteShortCode(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteShortCode, id)
	return err
}

const getShortCode = `-- name: GetShortCode :one
SELECT id, short_code, created_at FROM short_codes
WHERE id = ? LIMIT 1
`

func (q *Queries) GetShortCode(ctx context.Context, id int32) (ShortCode, error) {
	row := q.db.QueryRowContext(ctx, getShortCode, id)
	var i ShortCode
	err := row.Scan(&i.ID, &i.ShortCode, &i.CreatedAt)
	return i, err
}

const listShortCodes = `-- name: ListShortCodes :many
SELECT id, short_code, created_at FROM short_codes
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListShortCodesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShortCodes(ctx context.Context, arg ListShortCodesParams) ([]ShortCode, error) {
	rows, err := q.db.QueryContext(ctx, listShortCodes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShortCode
	for rows.Next() {
		var i ShortCode
		if err := rows.Scan(&i.ID, &i.ShortCode, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShortCodeName = `-- name: UpdateShortCodeName :execresult
UPDATE short_codes SET short_code = ?
WHERE id = ?
`

type UpdateShortCodeNameParams struct {
	ShortCode string `json:"short_code"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdateShortCodeName(ctx context.Context, arg UpdateShortCodeNameParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateShortCodeName, arg.ShortCode, arg.ID)
}
